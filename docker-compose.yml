version: '3.8'

services:
  # PostgreSQL Node 1 (Initial Writer)
  postgres1:
    image: postgres:15-alpine
    container_name: synapsedb-node1
    environment:
      - POSTGRES_DB=synapsedb
      - POSTGRES_USER=synapsedb
      - POSTGRES_PASSWORD=changeme123
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres1_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./sql:/docker-entrypoint-initdb.d/sql
      - ./scripts:/scripts
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c logging_collector=on
      -c log_directory=/var/lib/postgresql/data/log
      -c log_filename='postgresql-%Y-%m-%d_%H%M%S.log'
    ports:
      - "5432:5432"
    networks:
      synapsedb_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapsedb -d synapsedb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Node 2
  postgres2:
    image: postgres:15-alpine
    container_name: synapsedb-node2
    environment:
      - POSTGRES_DB=synapsedb
      - POSTGRES_USER=synapsedb
      - POSTGRES_PASSWORD=changeme123
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres2_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./sql:/docker-entrypoint-initdb.d/sql
      - ./scripts:/scripts
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c logging_collector=on
      -c log_directory=/var/lib/postgresql/data/log
      -c log_filename='postgresql-%Y-%m-%d_%H%M%S.log'
    ports:
      - "5433:5432"
    networks:
      synapsedb_network:
        ipv4_address: 172.20.0.11
    depends_on:
      - postgres1
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapsedb -d synapsedb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Node 3
  postgres3:
    image: postgres:15-alpine
    container_name: synapsedb-node3
    environment:
      - POSTGRES_DB=synapsedb
      - POSTGRES_USER=synapsedb
      - POSTGRES_PASSWORD=changeme123
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres3_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./sql:/docker-entrypoint-initdb.d/sql
      - ./scripts:/scripts
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c logging_collector=on
      -c log_directory=/var/lib/postgresql/data/log
      -c log_filename='postgresql-%Y-%m-%d_%H%M%S.log'
    ports:
      - "5434:5432"
    networks:
      synapsedb_network:
        ipv4_address: 172.20.0.12
    depends_on:
      - postgres1
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapsedb -d synapsedb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cluster Manager for Node 1
  cluster-manager1:
    build: 
      context: .
      dockerfile: Dockerfile.cluster-manager
    container_name: synapsedb-cluster-manager1
    environment:
      - NODE_NAME=node1
      - DB_HOST=postgres1
      - DB_PORT=5432
      - DB_NAME=synapsedb
      - DB_USER=synapsedb
      - DB_PASSWORD=changeme123
    volumes:
      - ./config/node1-config.yaml:/app/config.yaml
      - ./services:/app/services
    depends_on:
      postgres1:
        condition: service_healthy
    networks:
      - synapsedb_network
    restart: unless-stopped

  # Cluster Manager for Node 2
  cluster-manager2:
    build: 
      context: .
      dockerfile: Dockerfile.cluster-manager
    container_name: synapsedb-cluster-manager2
    environment:
      - NODE_NAME=node2
      - DB_HOST=postgres2
      - DB_PORT=5432
      - DB_NAME=synapsedb
      - DB_USER=synapsedb
      - DB_PASSWORD=changeme123
    volumes:
      - ./config/node2-config.yaml:/app/config.yaml
      - ./services:/app/services
    depends_on:
      postgres2:
        condition: service_healthy
    networks:
      - synapsedb_network
    restart: unless-stopped

  # Cluster Manager for Node 3
  cluster-manager3:
    build: 
      context: .
      dockerfile: Dockerfile.cluster-manager
    container_name: synapsedb-cluster-manager3
    environment:
      - NODE_NAME=node3
      - DB_HOST=postgres3
      - DB_PORT=5432
      - DB_NAME=synapsedb
      - DB_USER=synapsedb
      - DB_PASSWORD=changeme123
    volumes:
      - ./config/node3-config.yaml:/app/config.yaml
      - ./services:/app/services
    depends_on:
      postgres3:
        condition: service_healthy
    networks:
      - synapsedb_network
    restart: unless-stopped

  # Query Router / Load Balancer
  query-router:
    build:
      context: .
      dockerfile: Dockerfile.query-router
    container_name: synapsedb-query-router
    environment:
      - ROUTER_PORT=8080
      - DB_NAME=synapsedb
      - DB_USER=synapsedb
      - DB_PASSWORD=changeme123
    volumes:
      - ./config/router-config.yaml:/app/config.yaml
      - ./services:/app/services
    ports:
      - "8080:8080"
    depends_on:
      - postgres1
      - postgres2
      - postgres3
    networks:
      - synapsedb_network
    restart: unless-stopped

  # HAProxy for High Availability
  haproxy:
    image: haproxy:2.8-alpine
    container_name: synapsedb-haproxy
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "5000:5000"  # Writer endpoint
      - "5001:5001"  # Reader endpoint
      - "8404:8404"  # HAProxy stats
    depends_on:
      - postgres1
      - postgres2
      - postgres3
    networks:
      - synapsedb_network
    restart: unless-stopped

  # Cluster Initialization Service
  cluster-init:
    build:
      context: .
      dockerfile: Dockerfile.cluster-init
    container_name: synapsedb-cluster-init
    environment:
      - DB_NAME=synapsedb
      - DB_USER=synapsedb  
      - DB_PASSWORD=changeme123
    volumes:
      - ./scripts:/app/scripts
      - ./sql:/app/sql
      - ./config:/app/config
    depends_on:
      postgres1:
        condition: service_healthy
      postgres2:
        condition: service_healthy
      postgres3:
        condition: service_healthy
    networks:
      - synapsedb_network
    command: >
      sh -c "
        echo 'Waiting for cluster initialization...' &&
        sleep 10 &&
        python3 /app/scripts/initialize_cluster.py
      "

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: synapsedb-prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - synapsedb_network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: synapsedb-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - synapsedb_network
    restart: unless-stopped

volumes:
  postgres1_data:
  postgres2_data:
  postgres3_data:
  prometheus_data:
  grafana_data:

networks:
  synapsedb_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1