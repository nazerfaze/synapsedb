version: '3.8'

services:
  # PostgreSQL Node 1 with pglogical + pgvector
  postgres1:
    build:
      context: .
      dockerfile: docker/Dockerfile.postgres
    container_name: synapsedb-postgres1
    environment:
      POSTGRES_DB: synapsedb
      POSTGRES_USER: synapsedb
      POSTGRES_PASSWORD: synapsedb
      NODE_ID: node1
      NODE_NAME: postgres1
    volumes:
      - postgres1_data:/var/lib/postgresql/data
      - ./config/pg_config.conf:/etc/postgresql/postgresql.conf
      - ./certs:/opt/synapsedb/certs
    ports:
      - "5432:5432"
    networks:
      synapsedb_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapsedb -d synapsedb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Node 2 with pglogical + pgvector
  postgres2:
    build:
      context: .
      dockerfile: docker/Dockerfile.postgres
    container_name: synapsedb-postgres2
    environment:
      POSTGRES_DB: synapsedb
      POSTGRES_USER: synapsedb
      POSTGRES_PASSWORD: synapsedb
      NODE_ID: node2
      NODE_NAME: postgres2
    volumes:
      - postgres2_data:/var/lib/postgresql/data
      - ./config/pg_config.conf:/etc/postgresql/postgresql.conf
      - ./certs:/opt/synapsedb/certs
    ports:
      - "5433:5432"
    networks:
      synapsedb_network:
        ipv4_address: 172.20.0.11
    depends_on:
      postgres1:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapsedb -d synapsedb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Node 3 with pglogical + pgvector
  postgres3:
    build:
      context: .
      dockerfile: docker/Dockerfile.postgres
    container_name: synapsedb-postgres3
    environment:
      POSTGRES_DB: synapsedb
      POSTGRES_USER: synapsedb
      POSTGRES_PASSWORD: synapsedb
      NODE_ID: node3
      NODE_NAME: postgres3
    volumes:
      - postgres3_data:/var/lib/postgresql/data
      - ./config/pg_config.conf:/etc/postgresql/postgresql.conf
      - ./certs:/opt/synapsedb/certs
    ports:
      - "5434:5432"
    networks:
      synapsedb_network:
        ipv4_address: 172.20.0.12
    depends_on:
      postgres1:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synapsedb -d synapsedb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cluster Manager for Node 1 (All services)
  cluster-manager1:
    build:
      context: .
      dockerfile: docker/Dockerfile.services
    container_name: synapsedb-manager1
    environment:
      NODE_ID: node1
      DB_HOST: postgres1
      DB_PORT: 5432
      DB_NAME: synapsedb
      DB_USER: synapsedb
      DB_PASSWORD: synapsedb
      CLUSTER_NODES: node1:postgres1:5432,node2:postgres2:5432,node3:postgres3:5432
    ports:
      - "8080:8080"
      - "8081:8081"
      - "8082:8082"
      - "8083:8083"
    volumes:
      - ./services:/app/services
      - ./config:/app/config
      - ./certs:/app/certs
      - cluster1_data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres1:
        condition: service_healthy
    networks:
      - synapsedb_network
    restart: unless-stopped
    command: python /app/services/cluster_node.py

  # Cluster Manager for Node 2 (All services)
  cluster-manager2:
    build:
      context: .
      dockerfile: docker/Dockerfile.services
    container_name: synapsedb-manager2
    environment:
      NODE_ID: node2
      DB_HOST: postgres2
      DB_PORT: 5432
      DB_NAME: synapsedb
      DB_USER: synapsedb
      DB_PASSWORD: synapsedb
      CLUSTER_NODES: node1:postgres1:5432,node2:postgres2:5432,node3:postgres3:5432
    ports:
      - "8084:8080"
      - "8085:8081"
      - "8086:8082"
      - "8087:8083"
    volumes:
      - ./services:/app/services
      - ./config:/app/config
      - ./certs:/app/certs
      - cluster2_data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres2:
        condition: service_healthy
    networks:
      - synapsedb_network
    restart: unless-stopped
    command: python /app/services/cluster_node.py

  # Cluster Manager for Node 3 (All services)
  cluster-manager3:
    build:
      context: .
      dockerfile: docker/Dockerfile.services
    container_name: synapsedb-manager3
    environment:
      NODE_ID: node3
      DB_HOST: postgres3
      DB_PORT: 5432
      DB_NAME: synapsedb
      DB_USER: synapsedb
      DB_PASSWORD: synapsedb
      CLUSTER_NODES: node1:postgres1:5432,node2:postgres2:5432,node3:postgres3:5432
    ports:
      - "8088:8080"
      - "8089:8081"
      - "8090:8082"
      - "8091:8083"
    volumes:
      - ./services:/app/services
      - ./config:/app/config
      - ./certs:/app/certs
      - cluster3_data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres3:
        condition: service_healthy
    networks:
      - synapsedb_network
    restart: unless-stopped
    command: python /app/services/cluster_node.py

  # HAProxy Load Balancer
  haproxy:
    image: haproxy:2.8-alpine
    container_name: synapsedb-haproxy
    volumes:
      - ./config/haproxy_config.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "5001:5001"  # Read endpoint
      - "5002:5002"  # Write endpoint
      - "8404:8404"  # HAProxy stats
    depends_on:
      - postgres1
      - postgres2
      - postgres3
    networks:
      - synapsedb_network
    restart: unless-stopped

  # Cluster Initialization Service
  cluster-init:
    build:
      context: .
      dockerfile: docker/Dockerfile.services
    container_name: synapsedb-init
    environment:
      CLUSTER_NODES: node1:postgres1:5432,node2:postgres2:5432,node3:postgres3:5432
      DB_USER: synapsedb
      DB_PASSWORD: synapsedb
      DB_NAME: synapsedb
    volumes:
      - ./services:/app/services
      - ./config:/app/config
    depends_on:
      postgres1:
        condition: service_healthy
      postgres2:
        condition: service_healthy
      postgres3:
        condition: service_healthy
    networks:
      - synapsedb_network
    command: python /app/services/cluster_init.py

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: synapsedb-prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - synapsedb_network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: synapsedb-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - synapsedb_network
    restart: unless-stopped

volumes:
  postgres1_data:
  postgres2_data:
  postgres3_data:
  cluster1_data:
  cluster2_data:
  cluster3_data:
  prometheus_data:
  grafana_data:

networks:
  synapsedb_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1